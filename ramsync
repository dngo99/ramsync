#!/usr/bin/env bash

SYSTEMD="/etc/systemd/system"
TMPFS_MAX=0.25
TMPFS_MIN=0.5
INSTALL="/opt/ramsync"
CONFIG="/etc/opt/ramsync"


# FUNCTIONS


r_root()
{
	
}

function r_install()
{
	echo "Installing ramsync..."
	mkdir -p -m 700 "$INSTALL/bin"
	cp ramsync "$INSTALL/bin/"
	r_service
	r_timer
	systemctl enable ramsync.service ramsync-sync.timer
	echo "Installation complete. Please reboot."
	return 0
}

function r_uninstall()
{
echo "Uninstalling ramsync..."
	systemctl stop ramsync.service
	systemctl stop ramsync-sync.service
	systemctl stop ramsync-sync.timer
	systemctl disable ramsync.service
	systemctl disable ramsync-sync.service
	systemctl disable ramsync-sync.timer
	rm "$SYSTEMD/ramsync.service"
	rm "$SYSTEMD/ramsync-sync.service"
	rm "$SYSTEMD/ramsync-sync.timer"
	rm -rf "$INSTALL"
	rm -rf "$CONFIG"
	systemctl daemon-reload
	echo "Uninstallation complete."
}

function r_size()
{
	vmstat -s | head -n 1 | cut -f6 -d " "
	du -sk $1 | cut -f1
}

function r_sync()
{
	local DIRTOSYNC=$1
	local SYNCTODIR=$2
	if [ "$DIRTOSYNC" == "" ] || [ "$SYNCTODIR" == "" ]; then
		echo "error: (r_sync) source($DIRTOSYNC) and/or destination($SYNCTODIR) are blank"
		return 1
	fi
	if ! [ -e "$DIRTOSYNC" ]; then
		echo "error: (r_sync) $DIRTOSYNC does not exist"
		return 1
	fi
	if ! grep -qs "$DIRTOSYNC" /proc/mounts && ! grep -qs "$SYNCTODIR" /proc/mounts; then
		echo "error: (r_sync) $DIRTOSYNC and/or $SYNCTODIR are not mounted"
		return 1
	fi
	echo -n "syncing $DIRTOSYNC to $SYNCTODIR . . . "
	sync
	rsync -a --delete --links --inplace --no-whole-file "$DIRTOSYNC/" "$SYNCTODIR/"
	sync
	echo "done"
	return 0
}

function r_start()
{
	local DIRTOSYNC=$1
	local SYNCTODIR=$2
	local SIZE=$3
	local OPTION=""
	local FILESYS=""
	if [ "$DIRTOSYNC" == "" ] || [ "$SYNCTODIR" == "" ]; then
		echo "error: (r_start) source($DIRTOSYNC) and/or destination($SYNCTODIR) are blank"
		return 1
	fi
	if ! [ -e "$DIRTOSYNC" ]; then
		echo "error: (r_start) $DIRTOSYNC does not exist"
		return 1
	fi
	local USR=$(stat -c %U "$DIRTOSYNC")
	local GRP=$(stat -c %G "$DIRTOSYNC")
	local PEM=$(stat -c %a "$DIRTOSYNC")
	mkdir -p -m $PERM "$SYNCTODIR"
	chown $USR:$GRP "$SYNCTODIR"
	mount -o bind,private "$DIRTOSYNC" "$SYNCTODIR"
	echo mount -t tmpfs -o "defaults,uid=$USR,gid=$GRP,mode=$PERM,size=$SIZE tmpfs $DIRTOSYNC"
	mount -t tmpfs -o defaults,uid=$USR,gid=$GRP,mode=$PERM,size=$SIZE tmpfs $DIRTOSYNC
	if [ $? -ne 0 ]; then
		echo "(r_start) error: failed to mount tmpfs for $DIRTOSYNC:"
		return 1
	fi
	chmod $PERM "$DIRTOSYNC"
	chown $USR:$GRP "$DIRTOSYNC"
	r_sync "$SYNCTODIR" "$DIRTOSYNC"
	if [ $? -ne 0 ]; then
		r_stop "$DIRTOSYNC" "$SYNCTODIR"
		return 1
	fi
	return 0
}

function r_stop()
{
	local DIRTOSYNC=$1
	local SYNCTODIR=$2
	if [ "$DIRTOSYNC" == "" ] || [ "$SYNCTODIR" == "" ]; then
		echo "error: (r_stop) source($DIRTOSYNC) and/or destination($SYNCTODIR) are blank"
		return 1
	fi
	if ! [ -e "$DIRTOSYNC" ]; then
		echo "error: (r_stop) $DIRTOSYNC does not exist"
		return 1
	fi
	r_sync "$DIRTOSYNC" "$SYNCTODIR"
	umount -l "$DIRTOSYNC"
	umount -l "$SYNCTODIR"
	rm -r "$SYNCTODIR"
	return 0
}

function r_guid()
{
	local DIRTOSYNC=$1
	# HASH="$(echo -n $($1) | md5sum | awk '{print $1}')"
	HASH="$(echo -n $($1) | md5sum | cut -f1 -d' ')"
	TIME="$(echo $(($(date +%s%N)/100000)))"
	TIME="$(printf "%x\n" $TIME)"
	HASH="$HASH$TIME"
	return "$HASH"
}

# SYSTEMD SERVICES AND TIMERS


# Creates ramsync systemd service
r_service()
{
	cat <<EOF > "$SYSTEMD/ramsync.service"
[Unit]
Description=ramsync: persistent ramdisks
DefaultDependencies=no
Before=basic.target shutdown.target
After=local-fs.target 
Conflicts=shutdown.target reboot.target halt.target
IgnoreOnIsolate=yes

[Service]
Type=oneshot
RemainAfterExit=yes
User=root
ExecStart=/opt/ramsync/bin/ramsync start
ExecStop=/opt/ramsync/bin/ramsync stop

[Install]
WantedBy=sysinit.target
EOF
	return 0
}

# Creates ramsync systemd sync service and timer
r_timer()
{
	cat <<EOF > "$SYSTEMD/ramsync-sync.service"
[Unit]
Description=ramsync: sync service
DefaultDependencies=no
Requires=ramsync.service
Conflicts=shutdown.target reboot.target halt.target
IgnoreOnIsolate=yes

[Service]
Type=oneshot
RemainAfterExit=no
User=root
ExecStart=/opt/ramsync/bin/ramsync sync
EOF
	cat <<EOF > "$SYSTEMD/ramsync-sync.timer"
[Unit]
Description=ramsync: sync timer, syncs every 1 hour

[Timer]
Unit=ramsync-sync.service
OnBootSec=60s
OnUnitActiveSec=1h

[Install]
WantedBy=timers.target
EOF
	return 0
}


# PROGRAM START

if [ "$EUID" -ne 0 ]; then
	echo "Please run $0 as root."
	exit 1
fi

case $1 in
	"install")
		if [ -e /opt/ramsync/bin/ramsync ]; then
			echo "ramsync is already installed"
		else
			r_install
		fi
	;;
	"uninstall")
		r_uninstall
	;;
	"help")
	;;
	"summary")
	;;
	"start")
		if [ -e /tmp/ramsync/lock ]; then
			echo "ramsync already started, syncing..."
			r_sync /opt/test /opt/ramsync/test
		else
			mkdir /tmp/ramsync
			touch /tmp/ramsync/lock
			r_start /opt/test /opt/ramsync/test 512M
		fi
	;;
	"sync")
		r_sync /opt/test /opt/ramsync/test
	;;
	"stop")
		r_stop /opt/test /opt/ramsync/test
		rm -rf /tmp/ramsync
	;;
	*)
		echo "Usage: ramsync install|uninstall|help|summary|start|sync|stop"
	;;
esac
exit 0

